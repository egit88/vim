""""""""""""""""""
""" .vimrc.plugin
""""""""""""""""""

call plug#begin()

Plug 'vim-denops/denops.vim'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

Plug 'Shougo/ddc.vim'
Plug 'Shougo/ddc-ui-native'
Plug 'Shougo/ddc-around'
Plug 'matsui54/ddc-buffer'
Plug 'shun/ddc-source-vim-lsp'
Plug 'tani/ddc-fuzzy'

"  Plug 'Shougo/pum.vim'
Plug 'LumaKernel/ddc-file'
Plug 'Shougo/ddc-matcher_head'
Plug 'Shougo/ddc-sorter_rank'
Plug 'Shougo/ddc-converter_remove_overlap'

Plug 'tani/vim-jetpack', {'opt': 1} "bootstrap
Plug 'altercation/vim-colors-solarized'
Plug 'croaker/mustang-vim'
Plug 'jeffreyiacono/vim-colors-wombat'
Plug 'nanotech/jellybeans.vim'
Plug 'vim-scripts/Lucius'
Plug 'vim-scripts/Zenburn'
Plug 'mrkn/mrkn256.vim'
Plug 'jpo/vim-railscasts-theme'
Plug 'therubymug/vim-pyte'
Plug 'mhinz/vim-startify'
Plug 'egit78/emmet-vim'
Plug 't9md/vim-choosewin'
Plug 'nanotech/jellybeans.vim'
Plug 'w0ng/vim-hybrid'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'vim-scripts/twilight'
Plug 'jpo/vim-railscasts-theme'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-scripts/Wombat'
Plug 'tomasr/molokai'
Plug 'vim-scripts/rdark'
Plug 'fuenor/im_control.vim'
Plug 'vim-scripts/peaksea'
Plug 'vim-scripts/vibrantink'
Plug 'vim-scripts/graywh'
Plug 'vim-scripts/underwater-mod'
Plug 'vim-scripts/railscasts'
Plug 'vim-scripts/256-jungle'
Plug 'vim-scripts/inkpot'
Plug 'vim-scripts/maroloccio'
Plug 'vim-scripts/fu'
Plug 'vim-scripts/tir_black'
Plug 'vim-scripts/symfony'
Plug 'sjl/badwolf'
Plug 'marciomazza/vim-brogrammer-theme'
Plug 'NLKNguyen/papercolor-theme'
Plug 'itchyny/landscape.vim'
Plug 'jwalton512/vim-blade'
" Plug 'rayburgemeestre/phpfolding.vim'
"
Plug 'Shougo/unite.vim'
" Plug 'Shougo/vimshell'
Plug 'Shougo/vimproc'
Plug 'Shougo/vimfiler'
" Plug 'Shougo/neocomplcache'
Plug 'Shougo/neomru.vim'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
"
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'LeafCage/foldCC'
Plug 'itchyny/lightline.vim'
Plug 'ujihisa/unite-colorscheme'
Plug 'simeji/winresizer'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/syntastic'
Plug 'thinca/vim-ref'
Plug 'tpope/vim-surround'

Plug 'tribela/vim-transparent'
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'jdsimcoe/abstract.vim'
"Plug 'pavoljuhas/oldfilesearch.vim'
Plug 'dhruvasagar/vim-buffer-history'



call plug#end()


" デフォルトのカラースキーム
set t_Co=256 " 256色
" set background=light
" colorscheme Tomorrow
set background=dark
colorscheme landscape
colorscheme Tomorrow-Night-Bright
colorscheme badwolf
colorscheme molokai
colorscheme slate
set t_ut=y   " tmuxでの背景描画対策

"===================================
""" Fern
" Show hidden files
let g:fern#default_hidden=1

" Show file tree with Ctrl+n
nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=35<CR>

" Color
colorscheme abstract

" コマンド    説明
" j, k    上下に移動する
" l   フォルダを展開する、ファイルを開く
" h   フォルダを閉じる
" e   ファイルを開く
" E   垂直分割してファイルを開く
" t   新規タブでファイルを開く
" Ctrl+m フォルダを開く
" Ctrl+h  親ディレクトリに移動する
" N   ファイルを新規作成する
" K   ディレクトリを新規作成する
" D   ファイルを削除する
" m   ファイルを移動する
" R   ファイル名を変更する
" -   ファイルを選択する
" C   ファイルをコピーする
" P   ペーストする
" M   ファイルをコピーし、ペーストした時に元のファイルを削除する
" y   ファイルパスをコピーする
" z   ファイル名に合わせてウィンドウ幅を広げる
" !   隠しファイルを表示/非表示する


"===================================
" Ddc Settings
"===================================
call ddc#custom#patch_global({
\	'ui': 'native',
\	'sources': [
\		'vim-lsp',
\		'around',
\		'buffer',
\	],
\	'sourceOptions': {
\		'_': {
\			'matchers'  : ['matcher_fuzzy'],
\			'sorters'   : ['sorter_fuzzy'],
\			'converters': ['converter_fuzzy'],
\			'ignoreCase': v:true,
\		},
\		'around': {
\			'mark': '[Arround]',
\		},
\		'buffer': {
\			'mark': '[Buffer]',
\		},
\		'vim-lsp': {
\			'mark': '[LSP]',
\			'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\		},
\	},
\	'sourceParams': {
\		'around': { 'maxSize': 500 },
\		'buffer': {
\			'limitBytes': 5000000,
\			'forceCollect': v:true,
\			'fromAltBuf': v:true,
\		},
\	 },
\})

call ddc#custom#patch_global('sources', ['file'])
call ddc#custom#patch_global('sourceOptions', {
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \   'forceCompletionPattern': '\S/\S*',
    \ }})
call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ }})

" call ddc#custom#patch_global('sourceOptions', {
"  \ '_': {
"  \   'matchers': ['matcher_head'],
"  \   'sorters': ['sorter_rank'],
"  \   'converters': ['converter_remove_overlap'],
"  \ }})

call ddc#enable()

"===================================
" LSP Settings
"===================================
nnoremap <Leader>li :LspManageServers<CR>
nnoremap <Leader>LI :LspInstallServer<CR>
nnoremap <Leader>ls :LspStatus<CR>
nnoremap <Leader>lh :LspHover<CR>
nnoremap ]d :LspNextDiagnostic<CR>
nnoremap [d :LspPreviousDiagnostic<CR>
nnoremap ]e :LspNextError<CR>
nnoremap [e :LspPreviousError<CR>
nnoremap <C-]> :LspDefinition<CR>

" choosewin"{{{
" '-' で呼び出し
nmap  -  <Plug>(choosewin)

" オーバーレイを使う
let g:choosewin_overlay_enable = 1

" マルチバイトバッファでオーバーレイフォントを崩さないように
let g:choosewin_overlay_clear_multibyte = 1

" tmux の色に雰囲気を合わせる。
let g:choosewin_color_overlay = {
            \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
            \ 'cterm': [ 25, 25 ]
            \ }
let g:choosewin_color_overlay_current = {
            \ 'gui': ['firebrick1', 'firebrick1' ],
            \ 'cterm': [ 124, 124 ]
            \ }

let g:choosewin_blink_on_land		 = 0 " 頼むから着地時にカーソル点滅をさせないでくれ！
let g:choosewin_statusline_replace = 0 " どうかステータスラインリプレイスしないで下さい!
let g:choosewin_tabline_replace    = 0 " どうかタブラインもリプレイスしないでいただきたい！
"}}}

" unite {{{

" unite prefix key.
nnoremap [unite] <Nop>
nmap <Space>f [unite]

"インサートモードで開始しない
let g:unite_enable_start_insert = 0

" For ack.
if executable('ack-grep')
    let g:unite_source_grep_command = 'ack-grep'
    let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
    let g:unite_source_grep_recursive_opt = ''
endif

"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''

"bookmarkだけホームディレクトリに保存
let g:unite_source_bookmark_directory = $HOME . '/.unite/bookmark'

"現在開いているファイルのディレクトリ下のファイル一覧。
"開いていない場合はカレントディレクトリ
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
"レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
"uniteを開いている間のキーマッピング
augroup vimrc
    autocmd FileType unite call s:unite_my_settings()
augroup END
function! s:unite_my_settings()
    "ESCでuniteを終了
    nmap <buffer> <ESC> <Plug>(unite_exit)
    "入力モードのときjjでノーマルモードに移動
    imap <buffer> jj <Plug>(unite_insert_leave)
    "入力モードのときctrl+wでバックスラッシュも削除
    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
    "sでsplit
    nnoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
    inoremap <silent><buffer><expr> s unite#smart_map('s', unite#do_action('split'))
    "vでvsplit
    nnoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
    inoremap <silent><buffer><expr> v unite#smart_map('v', unite#do_action('vsplit'))
    "fでvimfiler
    nnoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
    inoremap <silent><buffer><expr> f unite#smart_map('f', unite#do_action('vimfiler'))
endfunction

"}}}

" vimfiler {{{
"vimデフォルトのエクスプローラをvimfilerで置き換える
let g:vimfiler_as_default_explorer = 1
"セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0
set modifiable
set write
"現在開いているバッファのディレクトリを開く
nnoremap <silent> fe :<C-u>VimFilerBufferDir -quit<CR>
"現在開いているバッファをIDE風に開く
nnoremap <silent> fi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>
"デフォルトのキーマッピングを変更
augroup vimrc
    autocmd FileType vimfiler call s:vimfiler_my_settings()
augroup END
function! s:vimfiler_my_settings()
    nmap <buffer> q <Plug>(vimfiler_exit)
    nmap <buffer> Q <Plug>(vimfiler_hide)
endfunction
"}}}

" neosnippet{{{
" Plugin key-mappings.
imap <C-k>	   <Plug>(neosnippet_expand_or_jump)
smap <C-k>	   <Plug>(neosnippet_expand_or_jump)
xmap <C-k>	   <Plug>(neosnippet_expand_target)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"
" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
let g:neosnippet#snippets_directory='~/dotfiles/snippets'
"}}}

" lightline{{{
command! -bar LightlineUpdate	   call lightline#init()|
            \ call lightline#colorscheme()|
            \ call lightline#update()

let g:lightline = {
            \ 'mode_map': { 'c': 'NORMAL' },
            \ 'active': {
            \	  'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
            \ },
            \ 'component_function': {
            \	  'modified': 'LightLineModified',
            \	  'readonly': 'LightLineReadonly',
            \	  'fugitive': 'LightLineFugitive',
            \	  'filename': 'LightLineFilename',
            \	  'fileformat': 'LightLineFileformat',
            \	  'filetype': 'LightLineFiletype',
            \	  'fileencoding': 'LightLineFileencoding',
            \	  'mode': 'LightLineMode',
            \ },
            \ 'separator': { 'left': '⮀', 'right': '⮂' },
            \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
            \ }
let g:lightline.colorscheme = 'PaperColor'
"powerline, wombat, jellybeans, solarized, seoul256, landscape, PaperColor

function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '⭤' : ''
endfunction

function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \  &ft == 'unite' ? unite#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? '⭠ '._ : ''
    endif
    return ''
endfunction

function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction"}}}

" foldcc "{{{
set foldmethod=marker
set foldtext =FoldCCtext()
let g:foldCCtext_head = ''
let g:foldCCtext_tail = '(v:foldend-v:foldstart+1)'
" let g:foldCCtext_head = '"(  ﾟｪﾟ)"'
" let g:foldCCtext_tail = '"(ﾟｪﾟ  )". (v:foldend-v:foldstart+1)'
let g:foldCCtext_enable_autofdc_adjuster = 1
let g:foldCCnavi_maxchars = 30
" 折りたたみのキーマップ
noremap [space]g :echo FoldCCnavi()<CR>
noremap [space] <nop>
nmap <Space> [space]
noremap [space]j zj " 上のfoldingへ
noremap [space]k zk " 下のfoldingへ
noremap [space]p [z " foldingの先頭
noremap [space]n ]z " foldingの最後尾"{{{"}}}
noremap [space]h zc " 閉じる
noremap [space]l zo " 開く
noremap [space]a za " folding状態をトグル
noremap [space]m zM " すべてのfoldingを閉じる
noremap [space]i zMzv " カーソルがあるところ以外のfoldingを閉じる
noremap [space]r zR " すべてのfoldingを開く
noremap [space]f zf"
noremap [space]d zd"
map <F5> <Esc>:EnableFastPHPFolds<Cr>
map <F6> <Esc>:EnablePHPFolds<Cr>
map <F7> <Esc>:DisablePHPFolds<Cr>
"}}}

" emmet{{{
  let g:user_emmet_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \}"}}}

