""""""""""""""""""
"""   .vimrc   """
""""""""""""""""""
" set shellslash              " Windowsでディレクトリパスの区切り文字に / を使えるようにする; プラグイン管理で不具合

" set history=500

let mapleader = "\<Space>"

set tabstop=4 shiftwidth=4 softtabstop=0
set expandtab              " タブを空白文字に展開

set wildmenu           " コマンド補完を強化
set wildmode=longest,list,full " リスト表示，最長マッチ

" 検索関連
set wrapscan   " 最後まで検索したら先頭へ戻る
set ignorecase " 大文字小文字無視
set smartcase  " 大文字ではじめたら大文字小文字無視しない
set incsearch  " インクリメンタルサーチ
set hlsearch   " 検索文字をハイライト
" ESCを二回押すことでハイライトを消す
nmap <silent> <ESC><ESC> :nohlsearch<CR>

" ファイル関連
set nobackup   " バックアップ取らない
set autoread   " 他で書き換えられたら自動で読み直す
set noswapfile " スワップファイル作らない
set hidden     " 編集中でも他のファイルを開けるようにする

" ビープ音除去
set vb t_vb=

"表示関連
set showmatch         " 括弧の対応をハイライト
set showcmd           " 入力中のコマンドを表示
set number            " 行番号表示
set wrap              " 画面幅で折り返す
"set list              " 不可視文字表示
"set listchars=tab:>  " 不可視文字の表示方法
set notitle           " タイトル書き換えない
set scrolloff=5       " 行送り

" ステータスライン関連
set laststatus=2
set statusline=%-(%f%m%h%r%w%)%=%{&ff}\|%{&fenc}\ %y%l,%c\ %0P

" ウィンドウ関連
set splitbelow
set splitright

" 補完
set completeopt=longest,menuone,preview

" ==================== カラー ==================== "
colorscheme default          " カラースキーム
colorscheme desert " カラースキーム
syntax on " シンタックスカラーリングオン
filetype indent on " ファイルタイプによるインデントを行う
filetype plugin on " ファイルタイプごとのプラグインを使う
" ポップアップメニューの色変える
"highlight Pmenu ctermbg=lightcyan ctermfg=black
"highlight PmenuSel ctermbg=blue ctermfg=black
"highlight PmenuSbar ctermbg=darkgray
"highlight PmenuThumb ctermbg=lightgray
highlight Comment ctermfg=blue

" 行番号のハイライト
set cursorline
highlight clear CursorLine

autocmd WinEnter    * set cursorline
autocmd WinLeave    * set nocursorline
autocmd InsertEnter * set nocursorline
autocmd InsertLeave * set cursorline

" ==================== カーソル ==================== "

" ==================== エンコーディング関連 ==================== "
set encoding=utf-8
set fileencodings=utf-8,euc-jp,iso-2022-jp,cp932,sjis
set fileformats=unix,dos,mac

" ==================== キーマップ ==================== "
" 表示行単位で移動
noremap j gj
noremap k gk
vnoremap j gj
vnoremap k gk

" コピー
" nnoremap Y y$

" search continue
" nnoremap <expr> n  'Nn'[v:searchforward]
" nnoremap <expr> N  'nN'[v:searchforward]

" ==================== baby-degu ==================== "
" 挿入モード解除キーの変更
inoremap jk <ESC>

" クリップボード連携（+clipboard環境）
set clipboard&
set clipboard^=unnamedplus

" ================== trouble shoot ==================== "

highlight Normal ctermbg=NONE guibg=NONE
highlight NonText ctermbg=NONE guibg=NONE
highlight SpecialKey ctermbg=NONE guibg=NONE
highlight EndOfBuffer ctermbg=NONE guibg=NONE

"ビープ音すべてを無効にする
set visualbell t_vb=
"エラーメッセージの表示時にビープを鳴らさない
set noerrorbells
set novisualbell
"うるさい
set belloff=all

" Automatically strip trailing space
autocmd BufWritePre * :%s/\s\+$//e

" Putty のタイトル文字列が Vim使用時に文字化けする
set notitle

" コメントストリング
autocmd FileType html,xml set commentstring=<!--%s-->

" GUI固有ではない画面表示の設定:
" ルーラーを表示 (noruler:非表示)
" set ruler
" タブや改行を表示 (list:表示)
" set list
" 解除するときは set nolist
"	tmux のコピーモード利用時は 注意 (nolist推奨）
" どの文字でタブや改行を表示するかを設定
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=1
" タイトルを表示
set title
" 入力されているテキストの最大幅
" (行がそれより長くなると、この幅を超えないように空白の後で改行される)を無効にする
set textwidth=0
" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/
" バッファを切替えてもundoの効力を失わない
set hidden

" 文字コード指定
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,sjis,cp932,cp20932
set fileencoding=utf8
" 改行コードの自動認識
set fileformats=unix,dos,mac

" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" 対応する括弧の表示時間を2にする
set matchtime=2
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM
" スクロールする時に下が見えるようにする
set scrolloff=5
" 移動コマンドを使ったとき、行頭に移動しない
set nostartofline

" タブが対応する空白の数
set tabstop=4
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空白の数
set softtabstop=4
" インデントの各段階に使われる空白の数
set shiftwidth=4

" タブをスペースに展開する (noexpandtab:展開しない)
set expandtab
""" setl noexpandtab
""" retab!
" set noexpandtab

" インデント
" 自動的インデント (noautoindent:インデントしない)
" 'autoindent'		一つ前の行に基づくインデント
" 'smartindent' 'autoindent'と同様だが幾つかのC構文を認識し、適切な箇所のインデントを増減させる。
" 'cindent' 他の2つの方法よりも賢く動作し、設定することで異なるインデントスタイルにも対応できる。
" 'indentexpr'		この中で一番融通が利く: ある行のインデントを計算するのにVimスクリプトを実行する。
" この方法が有効である(空でない)時にはその他 のインデントは抑制される。
set cindent

" ================ PHP ===================
""" " syntax PHP文法チェック
""" let g:syntastic_check_on_open = 1
""" let g:syntastic_enable_signs = 1
""" let g:syntastic_echo_current_error = 1
""" let g:syntastic_auto_loc_list = 2
""" let g:syntastic_enable_highlighting = 1
""" let g:syntastic_php_php_args = '-l'
""" set statusline+=%#warningmsg#
""" set statusline+=%{SyntasticStatuslineFlag()}
""" set statusline+=%*
"""
""" " vim-ref PHP等のマニュアル
""" " let g:ref_phpmanual_path = $HOME . '/dotfiles/.env/dest/php-chunked-xhtml'
""" " PHP辞書ファイル指定
""" autocmd FileType php,ctp :set dictionary=~/.vim/dict/php.dict
" PHPの関数やクラスの折りたたみ
let php_folding = 0
autocmd BufNewFile,BufRead *.ctp set filetype=php
let php_htmlInStrings=1
"blade
autocmd BufNewFile,BufRead *.php set ft=html | set ft=php
autocmd BufNewFile,BufRead *.blade.php set ft=blade.html.php


" 起動時のメッセージを表示しない
" set shortmess+=I

" カーソルが遅くなる対策 http://stackoverflow.com/questions/4775605/vim-syntax-highlight-improve-performance
set nocursorcolumn
set nocursorline

syntax sync minlines=256
"ステータスラインに文字コードと改行文字を表示する
set statusline=%<%f\ %m%=\ %{&ai?'[>]':''}%m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}\ %l,%c\ %P

" *.foo を bar ファイルとして
au BufNewFile,BufRead *.memo setf memo
au BufNewFile,BufRead *.md setf markdown
" TODO .md ファイルで、set fdm=marker しないと謎の折り畳みが消えない

" IME状態に応じたカーソル色を設定:
if has('multi_byte_ime')
    highlight Cursor guifg=#000d18 guibg=#8faf9f gui=bold
    highlight CursorIM guifg=NONE guibg=#ecbcbc
endif

" スワップファイルを作成しない
set noswapfile
" スワップファイル用のディレクトリ
"set directory=$HOME/vimbackup
" バックアップファイルを作成しない
set nobackup
set clipboard=unnamed

" set paste してからノーマルモードに抜けるとき nopaste
" autocmd InsertLeave * set nopaste

" -----------------------------------------------------------------
" マップ定義      "{{{
" 色の比較検討
" nnoremap <silent> cl :<C-u>Unite colorscheme -auto-preview<CR>

"" インサートモードでフルパスを挿入
" inoremap <silent>path <C-R>=expand('%:p')<CR>

" NERDTree
nnoremap <silent> nt :<C-u>NERDTreeToggle<CR>
"
"バッファ移動用キーマップ
" F2: 前のバッファ
" F3: 次のバッファ
" F4: バッファ削除
map <F2> <ESC>:bp<CR>
map <F3> <ESC>:bn<CR>
map <F4> <ESC>:bw<CR>
"表示行単位で行移動する
nnoremap j gj
onoremap j gj
xnoremap j gj
nnoremap k gk
onoremap k gk
xnoremap k gk
nnoremap <Down> gj
onoremap <Down> gj
xnoremap <Down> gj
nnoremap <Up> gk
onoremap <Up> gk
xnoremap <Up> gk
" C-a, C-eで行頭行末に移動する
inoremap <C-a> <ESC>^i
inoremap <C-e> <ESC>$i
"フレームサイズを怠惰に変更する
map <kPlus> <C-W>+
map <kMinus> <C-W>-
"インデント操作後も選択範囲を保つ
vnoremap > >gv
vnoremap < <gv

" インデントが同じかそれより深い範囲を選択する
function! VisualCurrentIndentBlock()
    let current_indent = indent('.')
    let current_line   = line('.')
    let current_col  = col('.')
    let last_line	   = line('$')

    let start_line = current_line
    let end_line = current_line
    while start_line != 1 && ( current_indent <= indent(start_line - 1) || getline(start_line - 1) =~ '^\s*$' )
        let start_line = start_line - 1
    endwhile
    while end_line != last_line && ( current_indent <= indent(end_line + 1) || getline(end_line + 1) =~ '^\s*$' )
        let end_line = end_line + 1
    endwhile

    call cursor(start_line, current_col)
    normal V
    call cursor(end_line, current_col)
endfunction

nnoremap gi :call VisualCurrentIndentBlock()<CR>
onoremap gi :normal gi<CR>

"}}}
" -----------------------------------------------------------------

" タブ関係 "{{{
set showtabline=2 " 常にタブラインを表示
" The prefix key.
nnoremap	[Tag]	  <Nop>
nmap	t [Tag]
" Tab jump
for n in range(1, 9)
    execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ（数字gtでも同じだが）

map <silent> [Tag]c :tabnew<CR>
map <silent> [Tag]d :tabclose<CR>
map <silent> [Tag]n :tabnext<CR>
map <silent> [Tag]p :tabpourevious<CR>
map <silent> [Tag]l :tablast<CR>
map <silent> [Tag]f :tabfirst<CR>

" 直近のタブに移動
map <silent> [Tag]r :TabRecent<CR>"
"}}}

" gitgutter 行番号の左側にdiffの+-とかが表示されるようにする ([c と ]c で前後のHunkに移動できる)
let g:gitgutter_sign_modified = 'M'

" 文字コード関連のコピペ設定 "{{{
"
if &encoding !=# 'utf-8'
    set encoding=japan
    set fileencoding=japan
endif
if has('iconv')
    let s:enc_euc = 'euc-jp'
    let s:enc_jis = 'iso-2022-jp'
    " iconvがeucJP-msに対応しているかをチェック
    if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
        let s:enc_euc = 'eucjp-ms'
        let s:enc_jis = 'iso-2022-jp-3'
        " iconvがJISX0213に対応しているかをチェック
    elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
        let s:enc_euc = 'euc-jisx0213'
        let s:enc_jis = 'iso-2022-jp-3'
    endif
    " fileencodingsを構築
    if &encoding ==# 'utf-8'
        let s:fileencodings_default = &fileencodings
        let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
        let &fileencodings = 'utf-8,'. &fileencodings .','. s:fileencodings_default
        unlet s:fileencodings_default
    else
        let &fileencodings = &fileencodings .','. s:enc_jis
        set fileencodings+=utf-8,ucs-2le,ucs-2
        if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
            set fileencodings+=cp932
            set fileencodings-=euc-jp
            set fileencodings-=euc-jisx0213
            set fileencodings-=eucjp-ms
            let &encoding = s:enc_euc
            let &fileencoding = s:enc_euc
        else
            let &fileencodings = &fileencodings .','. s:enc_euc
        endif
    endif
    " 定数を処分
    unlet s:enc_euc
    unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
    function! AU_ReCheck_FENC()
        if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
            let &fileencoding=&encoding
        endif
    endfunction
    autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" 改行コードの自動認識
set fileformats=unix,dos,mac
"}}}

" 検索関係 "{{{
source $VIMRUNTIME/macros/matchit.vim
" 検索結果を中心に
" nmap n nzz
" nmap N Nzz
" インクリメンタル検索
" set incsearch
" 検索にマッチしたすべてのテキストをハイライト
set hlsearch
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
" set nowrapscan
" コマンド、検索パターンを100個まで履歴に残す
set history=100
" ESCを二回押すことでハイライトを消す
nmap <silent> <ESC><ESC> :nohlsearch<CR>
"}}}


" ==================== プラグイン  ==================== "
if filereadable(expand('~/.vim/.vimrc.plugin'))
 source ~/.vim/.vimrc.plugin
endif
if filereadable(expand('~/vimfiles/vimrc.plugin'))
 source ~/vimfiles/vimrc.plugin
endif

" ==================== Local Configuration ==================== "
if filereadable(expand('~/.vim/.vimrc.local'))
  source ~/.vim/.vimrc.local
endif
if filereadable(expand('~/vimfiles/vimrc.local'))
  source ~/vimfiles/vimrc.local
endif
